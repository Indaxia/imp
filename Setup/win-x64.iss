; Script generated by the Inno Script Studio Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{F3C3BE32-DC94-4CD9-877A-D2F92053DA94}
AppName=Indaxia Modules & Packages (IMP)
AppVersion={#GetFileProductVersion("..\bin\Release\netcoreapp2.2\win-x64\publish\imp.dll")}
AppPublisher=Indaxia
AppPublisherURL=https://github.com/Indaxia/imp
AppSupportURL=https://github.com/Indaxia/imp/issues
DefaultDirName={pf}\IMP
DefaultGroupName=IMP
DisableProgramGroupPage=yes
LicenseFile=..\LICENSE
OutputBaseFilename=Install IMP for Windows
Compression=lzma
SolidCompression=yes
ChangesEnvironment=yes
RestartIfNeededByRun=False
ShowLanguageDialog=no
AppReadmeFile=..\README.md
ArchitecturesInstallIn64BitMode=x64
InfoAfterFile=..\README.md
UninstallDisplayName=Indaxia Modules & Packages (IMP)
AppCopyright=Indaxia / ScorpioT1000 (C) 2024
SetupIconFile=..\Resources\install.ico
AlwaysShowGroupOnReadyPage=True
AlwaysShowDirOnReadyPage=True
UninstallDisplayIcon={uninstallexe}
DisableWelcomePage=False

[Files]
Source: "..\bin\Release\netcoreapp2.2\win-x64\publish\*.dll"; DestDir: "{app}" 
Source: "..\bin\Release\netcoreapp2.2\win-x64\publish\*.json"; DestDir: "{app}"   
Source: "..\bin\Release\netcoreapp2.2\win-x64\publish\*.pdb"; DestDir: "{app}" 
Source: "..\bin\Release\netcoreapp2.2\win-x64\publish\imp.exe"; DestDir: "{app}"

[Icons]
Name: "{group}\{cm:UninstallProgram,IMP}"; Filename: "{uninstallexe}"
Name: "{group}\Documentation"; Filename: "https://github.com/Indaxia/IMP/blob/master/README.md"
Name: "{group}\IMP"; Filename: "{app}\imp.exe"; IconFilename: "{uninstallexe}"; Parameters: "--noexit"

[Registry]
Root: HKLM; \
  Subkey: "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"; \
  ValueType: expandsz; \
  ValueName: "Path"; \
  ValueData: "{olddata};{app}"; \
  Check: NeedsAddPath('{app}') 

[Code]
function NeedsAddPath(Param: string): boolean;
var
  OrigPath: string;
begin
  if not RegQueryStringValue(HKEY_LOCAL_MACHINE,
    'SYSTEM\CurrentControlSet\Control\Session Manager\Environment',
    'Path', OrigPath)
  then begin
    Result := True;
    exit;
  end;
  { look for the path with leading and trailing semicolon }
  { Pos() returns 0 if not found }
  Result := Pos(';' + Param + ';', ';' + OrigPath + ';') = 0;
end;

const
  EnvironmentKey = 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment';

procedure RemovePath(Path: string);
var
  Paths: string;
  P: Integer;
begin
  if not RegQueryStringValue(HKEY_LOCAL_MACHINE, EnvironmentKey, 'Path', Paths) then
  begin
    Log('PATH not found');
  end
    else
  begin
    Log(Format('PATH is [%s]', [Paths]));

    P := Pos(';' + Uppercase(Path) + ';', ';' + Uppercase(Paths) + ';');
    if P = 0 then
    begin
      Log(Format('Path [%s] not found in PATH', [Path]));
    end
      else
    begin
      if P > 1 then P := P - 1;
      Delete(Paths, P, Length(Path) + 1);
      Log(Format('Path [%s] removed from PATH => [%s]', [Path, Paths]));

      if RegWriteStringValue(HKEY_LOCAL_MACHINE, EnvironmentKey, 'Path', Paths) then
      begin
        Log('PATH written');
      end
        else
      begin
        Log('Error writing PATH');
      end;
    end;
  end;
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
  if CurUninstallStep = usUninstall then
  begin
    RemovePath(ExpandConstant('{app}'));
  end;
end;
